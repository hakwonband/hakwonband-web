<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="hakwonband.hakwon.dao.StudentDAO">


	<!-- 반에 속하지 않은 학생 리스트 -->
	<select id="notClass" parameterType="dataMap" resultType="dataMap">
	<![CDATA[
		/*	StudentDAO.notClass	*/
		select
			a.user_no
			, a.user_type
			, a.user_id
			, a.user_email
			, a.approved_yn
			, a.use_yn
			, b.user_name
			, b.user_gender
			, b.tel1_no
			, get_file_path(b.photo_file_no) as user_photo_path
			, calc_age(b.user_birthday) as user_age
			, date_format(d.reg_date, '%Y년%m월%d일 %H:%i') as reg_date
			, b.attendance_code
		from
			tb_hakwon_member d
			, tb_user a
			, tb_user_info b
		where
			d.hakwon_no = #{hakwon_no}
			and d.user_type = '006'
			and d.user_no not in(
				select student_user_no from tb_hakwon_class_student where hakwon_no = #{hakwon_no} and class_no = #{class_no}
			)
			and d.user_no = a.user_no
			and a.user_no = b.user_no
			and (
				b.user_name like concat( '%', #{search_text}, '%' )
				or
				b.user_id like concat( '%', #{search_text}, '%' )
			)
		order by
			d.reg_date desc
		limit 30
	]]>
	</select>

	<!-- 학생 리스트 -->
	<select id="studentList" parameterType="dataMap" resultType="dataMap">
	<![CDATA[
		/*	StudentDAO.studentList	*/
		select
			a.user_no
			, a.user_type
			, a.user_id
			, a.user_email
			, a.approved_yn
			, a.use_yn
			, b.user_name
			, b.user_gender
			, b.tel1_no
			, get_file_path(b.photo_file_no) as user_photo_path
			, calc_age(b.user_birthday) as user_age
			, date_format(d.reg_date, '%Y년%m월%d일 %H:%i') as reg_date
			, b.attendance_code
		from
			tb_hakwon_member d
			, tb_user a
			, tb_user_info b
		where
			d.hakwon_no = #{hakwon_no}
			and d.user_no = a.user_no
			and d.user_type= '006'
			and a.user_no = b.user_no
	]]>
		<if test="@hakwonband.util.StringUtil@isNotNull( search_text )">
			and (
				b.user_name like concat('%', #{search_text}, '%')
				or
				b.user_id like concat('%', #{search_text}, '%')
			)
		</if>
	<![CDATA[
		order by
			d.reg_date desc
		limit
			#{start_no}, #{page_scale}
	]]>
	</select>

	<!-- 학생 리스트 -->
	<select id="studentCount" parameterType="dataMap" resultType="int">
	<![CDATA[
		/*	StudentDAO.studentCount	*/
		select
			count(1)
		from
			tb_hakwon_member d
			, tb_user_info b
		where
			d.hakwon_no = #{hakwon_no}
			and d.user_type= '006'
			and d.user_no = b.user_no
	]]>
		<if test="@hakwonband.util.StringUtil@isNotNull( search_text )">
			and (
				b.user_name like concat('%', #{search_text}, '%')
				or
				b.user_id like concat('%', #{search_text}, '%')
			)
		</if>
	</select>

	<!-- 학생 권한 체크 -->
	<select id="studentRoleCheck" parameterType="dataMap" resultType="dataMap">
	<![CDATA[
		/*	StudentDAO.studentRoleCheck	*/
		select
			count(1) as cnt
			, case when #{user_type} = '003' then (select count(1) from tb_hakwon where hakwon_no = #{hakwon_no} and master_user_no = #{user_no})
				when #{user_type} = '004' then (select count(1) from tb_hakwon_teacher where hakwon_no = #{hakwon_no} and user_no = #{user_no} and approved_yn = 'Y')
				else 0 end as role_cnt
		from
			tb_hakwon_member d
			, tb_user_info b
		where
			d.hakwon_no = #{hakwon_no}
			and d.user_no = #{student_user_no}
			and d.user_type = '006'
			and d.user_no = b.user_no
	]]>
	</select>

	<!-- 반 소속 학생 리스트 -->
	<select id="classStudentList" parameterType="dataMap" resultType="dataMap">
	<![CDATA[
		/*	StudentDAO.classStudentList	*/
		select
			a.student_user_no as user_no
			, c.user_type
			, c.user_id
			, c.user_email
			, c.approved_yn
			, c.use_yn
			, date_format(b.reg_date, '%Y년%m월%d일 %H:%i') as reg_date
			, d.user_name
			, d.user_gender
			, d.tel1_no
			, get_file_path(d.photo_file_no) as user_photo_path
			, calc_age(d.user_birthday) as user_age
			, (select group_concat(get_user_info(y.user_no) SEPARATOR 0x12) from tb_student_parent x, tb_user_info y where x.student_user_no = b.user_no and x.parent_user_no = y.user_no) as parent_list
			, d.attendance_code
		from
			tb_hakwon_class_student a
			, tb_hakwon_member b
			, tb_user c
			, tb_user_info d
		where
			a.hakwon_no = #{hakwon_no}
			and a.class_no = #{class_no}
			and a.hakwon_no = b.hakwon_no
			and b.user_type = '006'
			and a.student_user_no = b.user_no
			and a.student_user_no = c.user_no
			and c.use_yn = 'Y'
			and c.user_no = d.user_no
	]]>
		<if test="@hakwonband.util.StringUtil@isNotNull( search_text )">
			and (
				d.user_name like concat( '%', #{search_text}, '%' )
				or
				d.user_id like concat( '%', #{search_text}, '%' )
			)
		</if>
	<![CDATA[
		order by
			d.user_name asc
		limit
			#{start_no}, #{page_scale}
	]]>
	</select>

	<!-- 반 소속 학생 리스트 카운트 -->
	<select id="classStudentCount" parameterType="dataMap" resultType="int">
	<![CDATA[
		/*	StudentDAO.classStudentCount	*/
		select
			count(1)
		from
			tb_hakwon_class_student a
			, tb_hakwon_member b
			, tb_user c
			, tb_user_info d
		where
			a.hakwon_no = #{hakwon_no}
			and a.class_no = #{class_no}
			and a.hakwon_no = b.hakwon_no
			and b.user_type = '006'
			and a.student_user_no = b.user_no
			and a.student_user_no = c.user_no
			and c.use_yn = 'Y'
			and c.user_no = d.user_no
	]]>
		<if test="@hakwonband.util.StringUtil@isNotNull( search_text )">
			and (
				d.user_name like concat( '%', #{search_text}, '%' )
				or
				d.user_id like concat( '%', #{search_text}, '%' )
			)
		</if>
	</select>

	<!-- 사용자 비밀번호 및 이메일 정보 수정 -->
	<update id="updateSchool" parameterType="dataMap">
	<![CDATA[
		/* StudentDAO.updateSchool */
		update tb_student_school set
			school_name		= #{school_name}
			, school_level	= #{school_level}
			, level			= #{level}
		where
			user_no			= #{user_no}
	]]>
	</update>

	<select id="parentMappingMemberCheck" parameterType="dataMap" resultType="int">
	<![CDATA[
		/* StudentDAO.parentMappingMemberCheck */
		select count(1) from
		tb_hakwon_member
		where
			hakwon_no = #{hakwon_no}
			and (user_no = #{student_user_no} or user_no = #{parent_user_no})
	]]>
	</select>

	<insert id="parentMapping" parameterType="dataMap">
	<![CDATA[
		/* StudentDAO.parentMapping */
		insert into tb_student_parent (
			student_user_no, parent_user_no, approved_yn, req_date, approved_date
		) values (
			#{student_user_no}, #{parent_user_no}, 'Y', now(), now()
		) on duplicate key update approved_yn = 'Y', approved_date = now()
	]]>
	</insert>
</mapper>